type Beer {
  abv: Float
  brewery: Brewery
  breweryId: Int
  createdAt: ISO8601DateTime!
  ibu: Float
  id: ID!
  name: String
  ounces: Float
  style: Style
  styleId: Int
  updatedAt: ISO8601DateTime!
}

type Brewery {
  city: String
  createdAt: ISO8601DateTime!
  id: ID!
  name: String
  state: String
  updatedAt: ISO8601DateTime!
}

"""
Autogenerated input type of CreateUser
"""
input CreateUserInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  email: String!
  name: String!
  password: String!
}

"""
Autogenerated return type of CreateUser.
"""
type CreateUserPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: Error
  user: User
}

type Error {
  messages: [String!]!
}

"""
An ISO 8601-encoded datetime
"""
scalar ISO8601DateTime

type Mutation {
  createUser(
    """
    Parameters for CreateUser
    """
    input: CreateUserInput!
  ): CreateUserPayload
  signIn(
    """
    Parameters for SignIn
    """
    input: SignInInput!
  ): SignInPayload
}

type Query {
  beers: [Beer!]!
  breweries: [Brewery!]!
  styles: [Style!]!
}

"""
Autogenerated input type of SignIn
"""
input SignInInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  email: String!
  password: String!
}

"""
Autogenerated return type of SignIn.
"""
type SignInPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  token: String
  user: User
}

type Style {
  createdAt: ISO8601DateTime!
  id: ID!
  name: String
  updatedAt: ISO8601DateTime!
}

type User {
  createdAt: ISO8601DateTime!
  email: String
  id: ID!
  name: String
  updatedAt: ISO8601DateTime!
}
